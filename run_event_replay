#!/usr/bin/env bash

#
# 1. Parsing comman line arguments
#
while getopts w: flag
do
    case "${flag}" in
        w) workers=${OPTARG};
    esac
done

#
# 2. Prepare DB for event-replay
#
PG_USER=postgres \
PG_PASSWORD=postgres \
PG_DATABASE=stacks_blockchain_api \
PG_SCHEMA=public \
PG_PORT=5490 \
node ./lib/event-replay/parquet-based/pre-replay-db.js

wait

#
# 3. NEW_BURN_BLOCK events
#
STACKS_CHAIN_ID=0x00000001 node ./lib/index.js from-parquet-events --new-burn-block

wait

#
# 4. ATTACHMENTS_NEW events
#
STACKS_CHAIN_ID=0x00000001 node ./lib/index.js from-parquet-events --attachment-new

wait

#
# 5. NEW_BLOCK events
#

# Generate ID chunks in accordance to workers amount
node ./lib/event-replay/parquet-based/gen-ids-file.js --workers=${workers}

wait

id_files=(./events/new_block/ids_*.txt)
for id_file in "${id_files[@]}"
do
  NODE_OPTIONS=--max-old-space-size=8192 \
  STACKS_CHAIN_ID=0x00000001 \
  node ./lib/index.js from-parquet-events --new-block --ids-path=${id_file} &
done

wait

#
# 6. Prepare DB for regular operations after event-replay
#
PG_USER=postgres \
PG_PASSWORD=postgres \
PG_DATABASE=stacks_blockchain_api \
PG_SCHEMA=public \
PG_PORT=5490 \
node ./lib/event-replay/parquet-based/post-replay-db.js

wait

exit 0
